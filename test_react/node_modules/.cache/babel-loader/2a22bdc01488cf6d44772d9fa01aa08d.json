{"ast":null,"code":"var _jsxFileName = \"/nfs/ug/homes-3/p/patilabh/Desktop/Test_React/test_react/src/NodeList.js\";\nimport React from 'react';\nimport Node from './Node';\n\nconst NodeList = ({\n  num_nodes\n}) => {\n  // do computations here to get the centers of Node\n  // for now it just uses iterator i in the for loop\n  // MIGHT NEED RADIUS RETURNED FROM THIS FUNCTION\n  function coordinates(num_nodes) {\n    debugger;\n    var coords = [];\n    var sizeOfWindow = Math.min(window.innerHeight, window.innerWidth);\n    var centerX = sizeOfWindow / 2;\n    var centerY = sizeOfWindow / 2;\n    var degreesInBetween = 360 / num_nodes;\n    var degree = 90; //start from 90\n\n    var radius = 0.419 * sizeOfWindow;\n\n    for (var i = 0; i < num_nodes; i++, degree += degreesInBetween) {\n      var coordX = centerX + Math.cos(degree) * radius;\n      var coordY = centerY + Math.sin(degree) * radius;\n      coords.push({\n        coordX,\n        coordY\n      });\n    }\n\n    return coords;\n  }\n\n  var serverCoords = coordinates(num_nodes);\n  var j = 1;\n  const list = [];\n\n  for (var i = 0; i < num_nodes; i++) {\n    console.log('Circle ' + j++);\n    console.log(serverCoords[i].coordX);\n    console.log(serverCoords[i].coordX);\n    list.push(React.createElement(Node, {\n      key: i + 1,\n      centX: serverCoords[i].coordX,\n      centY: serverCoords[i].coordX,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }, list);\n};\n\nexport default NodeList;","map":{"version":3,"sources":["/nfs/ug/homes-3/p/patilabh/Desktop/Test_React/test_react/src/NodeList.js"],"names":["React","Node","NodeList","num_nodes","coordinates","coords","sizeOfWindow","Math","min","window","innerHeight","innerWidth","centerX","centerY","degreesInBetween","degree","radius","i","coordX","cos","coordY","sin","push","serverCoords","j","list","console","log"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAEnC;AACA;AACA;AACA,WAASC,WAAT,CAAqBD,SAArB,EAA+B;AAC9B;AACG,QAAIE,MAAM,GAAG,EAAb;AAEA,QAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASC,MAAM,CAACC,WAAhB,EAA4BD,MAAM,CAACE,UAAnC,CAAnB;AACA,QAAIC,OAAO,GAAGN,YAAY,GAAC,CAA3B;AACA,QAAIO,OAAO,GAAGP,YAAY,GAAC,CAA3B;AAEA,QAAIQ,gBAAgB,GAAG,MAAIX,SAA3B;AACA,QAAIY,MAAM,GAAG,EAAb,CAT2B,CASX;;AAChB,QAAIC,MAAM,GAAG,QAAMV,YAAnB;;AACA,SAAI,IAAIW,CAAC,GAAG,CAAZ,EAAcA,CAAC,GAACd,SAAhB,EAA2Bc,CAAC,IAAIF,MAAM,IAAED,gBAAxC,EAAyD;AACrD,UAAII,MAAM,GAAGN,OAAO,GAAGL,IAAI,CAACY,GAAL,CAASJ,MAAT,IAAiBC,MAAxC;AACA,UAAII,MAAM,GAAGP,OAAO,GAAGN,IAAI,CAACc,GAAL,CAASN,MAAT,IAAiBC,MAAxC;AACAX,MAAAA,MAAM,CAACiB,IAAP,CAAY;AAACJ,QAAAA,MAAD;AAAQE,QAAAA;AAAR,OAAZ;AACH;;AACD,WAAOf,MAAP;AACH;;AAED,MAAIkB,YAAY,GAAGnB,WAAW,CAACD,SAAD,CAA9B;AACA,MAAIqB,CAAC,GAAC,CAAN;AACA,QAAMC,IAAI,GAAG,EAAb;;AACA,OAAK,IAAIR,CAAC,GAAC,CAAX,EAAcA,CAAC,GAACd,SAAhB,EAA2Bc,CAAC,EAA5B,EAAgC;AAG/BS,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAYH,CAAC,EAAzB;AACAE,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACN,CAAD,CAAZ,CAAgBC,MAA5B;AACAQ,IAAAA,OAAO,CAACC,GAAR,CAAYJ,YAAY,CAACN,CAAD,CAAZ,CAAgBC,MAA5B;AAEAO,IAAAA,IAAI,CAACH,IAAL,CAAU,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEL,CAAC,GAAC,CAAb;AACN,MAAA,KAAK,EAAIM,YAAY,CAACN,CAAD,CAAZ,CAAgBC,MADnB;AAEN,MAAA,KAAK,EAAIK,YAAY,CAACN,CAAD,CAAZ,CAAgBC,MAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AAGA;;AAED,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEO,IADF,CADD;AAKA,CA5CD;;AA8CA,eAAevB,QAAf","sourcesContent":["import React from 'react';\nimport Node from './Node';\n\nconst NodeList = ({ num_nodes }) => {\n\n\t// do computations here to get the centers of Node\n\t// for now it just uses iterator i in the for loop\n\t// MIGHT NEED RADIUS RETURNED FROM THIS FUNCTION\n\tfunction coordinates(num_nodes){\n\t\tdebugger;\n\t    var coords = [];\n\n    \tvar sizeOfWindow = Math.min(window.innerHeight,window.innerWidth);\n    \tvar centerX = sizeOfWindow/2;\n\t    var centerY = sizeOfWindow/2;\n\n    \tvar degreesInBetween = 360/num_nodes;\n    \tvar degree = 90;//start from 90\n    \tvar radius = 0.419*sizeOfWindow;\n    \tfor(var i = 0;i<num_nodes ;i++, degree+=degreesInBetween){\n        \tvar coordX = centerX + Math.cos(degree)*radius;\n        \tvar coordY = centerY + Math.sin(degree)*radius;\n        \tcoords.push({coordX,coordY});\n    \t}\n    \treturn coords;\n\t}\n\n\tvar serverCoords = coordinates(num_nodes);\n\tvar j=1;\n\tconst list = []\n\tfor (var i=0; i<num_nodes; i++) {\n\n\n\t\tconsole.log('Circle ' + j++);\n\t\tconsole.log(serverCoords[i].coordX);\n\t\tconsole.log(serverCoords[i].coordX);\n\n\t\tlist.push(<Node key={i+1} \n\t\t\t\t\t\tcentX = {serverCoords[i].coordX} \n\t\t\t\t\t\tcentY = {serverCoords[i].coordX} />)\n\t}\n\n\treturn (\n\t\t<div>\n\t\t\t{list}\n\t\t</div>\n\t);\n}\n\nexport default NodeList;\n\n"]},"metadata":{},"sourceType":"module"}