{"ast":null,"code":"var _jsxFileName = \"/nfs/ug/homes-3/p/patilabh/Desktop/Test_React/test_react/src/NodeList.js\";\nimport React from 'react';\nimport Node from './Node';\n\nconst NodeList = ({\n  num_nodes\n}) => {\n  // do computations here to get the centers of Node\n  // for now it just uses iterator i in the for loop\n  // MIGHT NEED RADIUS RETURNED FROM THIS FUNCTION\n  function coordinates(num_nodes) {\n    var coords = [];\n    var sizeOfWindow = Math.min(window.innerHeight, window.innerWidth);\n    var centerX = sizeOfWindow / 2;\n    var centerY = sizeOfWindow / 3;\n    var degreesInBetween = 360 / num_nodes;\n    var degree = 90; //start from 90\n\n    var radius = 175; //set coordinate of first point on topmost point of circle\n\n    var firstCircle = coords.push;\n\n    for (var i = 0; i < num_nodes; i++, degree += degreesInBetween) {\n      var coordX = centerX + Math.cos(degree) * radius;\n      var coordY = centerY + Math.sin(degree) * radius;\n      coords.push({\n        coordX,\n        coordY\n      });\n    }\n\n    return coords;\n  }\n\n  var serverCoords = coordinates(num_nodes);\n  const list = [];\n\n  for (var i = 0; i < num_nodes; i++) {\n    list.push(React.createElement(Node, {\n      key: i + 1,\n      centX: serverCoords[i].coordX,\n      centY: serverCoords[i].coordY,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 36\n      },\n      __self: this\n    }));\n  }\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    width: window.innerHeight,\n    height: window.innerHeight,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, list));\n};\n\nexport default NodeList;\n/*// hardcoded centers for 5 circles\nvar serverCoords = [{ coordX: 300 , coordY: 100 }, \n\t\t\t\t\t{ coordX: 500 , coordY: 100 },\n\t\t\t\t\t{ coordX: 400 , coordY: 100 },\n\t\t\t\t\t{ coordX: 200 , coordY: 100 },\n\t\t\t\t\t{ coordX: 100 , coordY: 100 }];*/","map":{"version":3,"sources":["/nfs/ug/homes-3/p/patilabh/Desktop/Test_React/test_react/src/NodeList.js"],"names":["React","Node","NodeList","num_nodes","coordinates","coords","sizeOfWindow","Math","min","window","innerHeight","innerWidth","centerX","centerY","degreesInBetween","degree","radius","firstCircle","push","i","coordX","cos","coordY","sin","serverCoords","list"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,IAAP,MAAiB,QAAjB;;AAEA,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAmB;AAEnC;AACA;AACA;AACA,WAASC,WAAT,CAAqBD,SAArB,EAA+B;AAC3B,QAAIE,MAAM,GAAG,EAAb;AAEA,QAAIC,YAAY,GAAGC,IAAI,CAACC,GAAL,CAASC,MAAM,CAACC,WAAhB,EAA4BD,MAAM,CAACE,UAAnC,CAAnB;AACA,QAAIC,OAAO,GAAGN,YAAY,GAAC,CAA3B;AACA,QAAIO,OAAO,GAAGP,YAAY,GAAC,CAA3B;AAEA,QAAIQ,gBAAgB,GAAG,MAAIX,SAA3B;AACA,QAAIY,MAAM,GAAG,EAAb,CAR2B,CAQX;;AAChB,QAAIC,MAAM,GAAG,GAAb,CAT2B,CAW3B;;AACA,QAAIC,WAAW,GACfZ,MAAM,CAACa,IADP;;AAGA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAChB,SAAjB,EAA6BgB,CAAC,IAAIJ,MAAM,IAAED,gBAA1C,EAA2D;AACvD,UAAIM,MAAM,GAAGR,OAAO,GAAGL,IAAI,CAACc,GAAL,CAASN,MAAT,IAAiBC,MAAxC;AACA,UAAIM,MAAM,GAAGT,OAAO,GAAGN,IAAI,CAACgB,GAAL,CAASR,MAAT,IAAiBC,MAAxC;AACAX,MAAAA,MAAM,CAACa,IAAP,CAAY;AAACE,QAAAA,MAAD;AAAQE,QAAAA;AAAR,OAAZ;AACH;;AACJ,WAAOjB,MAAP;AACA;;AAED,MAAImB,YAAY,GAAGpB,WAAW,CAACD,SAAD,CAA9B;AACA,QAAMsB,IAAI,GAAG,EAAb;;AAEA,OAAK,IAAIN,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAChB,SAAhB,EAA2BgB,CAAC,EAA5B,EAAgC;AAC/BM,IAAAA,IAAI,CAACP,IAAL,CAAU,oBAAC,IAAD;AAAM,MAAA,GAAG,EAAEC,CAAC,GAAC,CAAb;AACN,MAAA,KAAK,EAAIK,YAAY,CAACL,CAAD,CAAZ,CAAgBC,MADnB;AAEN,MAAA,KAAK,EAAII,YAAY,CAACL,CAAD,CAAZ,CAAgBG,MAFnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAV;AAGA;;AAED,SACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACC;AAAK,IAAA,KAAK,EAAGb,MAAM,CAACC,WAApB;AAAiC,IAAA,MAAM,EAAGD,MAAM,CAACC,WAAjD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACEe,IADF,CADD,CADD;AAOA,CA5CD;;AA8CA,eAAevB,QAAf;AAGC","sourcesContent":["import React from 'react';\nimport Node from './Node';\n\nconst NodeList = ({ num_nodes }) => {\n\n\t// do computations here to get the centers of Node\n\t// for now it just uses iterator i in the for loop\n\t// MIGHT NEED RADIUS RETURNED FROM THIS FUNCTION\n\tfunction coordinates(num_nodes){\n\t    var coords = [];\n\n    \tvar sizeOfWindow = Math.min(window.innerHeight,window.innerWidth);\n    \tvar centerX = sizeOfWindow/2;\n    \tvar centerY = sizeOfWindow/3;\n\n    \tvar degreesInBetween = 360/num_nodes;\n    \tvar degree = 90;//start from 90\n    \tvar radius = 175;\n\n    \t//set coordinate of first point on topmost point of circle\n    \tvar firstCircle = \n    \tcoords.push\n\n    \tfor(var i = 0; i<num_nodes ; i++, degree+=degreesInBetween){\n        \tvar coordX = centerX + Math.cos(degree)*radius;\n        \tvar coordY = centerY + Math.sin(degree)*radius;\n        \tcoords.push({coordX,coordY});\n    \t}\n\t\treturn coords;\n\t}\n\n\tvar serverCoords = coordinates(num_nodes);\n\tconst list = []\n\n\tfor (var i=0; i<num_nodes; i++) {\n\t\tlist.push(<Node key={i+1} \n\t\t\t\t\t\tcentX = {serverCoords[i].coordX} \n\t\t\t\t\t\tcentY = {serverCoords[i].coordY} />)\n\t}\n\n\treturn (\n\t\t<div>\t\t\t\n\t\t\t<svg width= {window.innerHeight} height= {window.innerHeight}>\n\t\t\t\t{list}\n    \t\t</svg>\n\t\t</div>\n\t);\n}\n\nexport default NodeList;\n\n\n\t/*// hardcoded centers for 5 circles\n\tvar serverCoords = [{ coordX: 300 , coordY: 100 }, \n\t\t\t\t\t\t{ coordX: 500 , coordY: 100 },\n\t\t\t\t\t\t{ coordX: 400 , coordY: 100 },\n\t\t\t\t\t\t{ coordX: 200 , coordY: 100 },\n\t\t\t\t\t\t{ coordX: 100 , coordY: 100 }];*/"]},"metadata":{},"sourceType":"module"}